-- Script para corrigir problemas de permissões no Supabase
-- Execute este script no SQL Editor do Supabase

-- 1. Verificar se as tabelas existem
DO $$
BEGIN
    -- Verificar se a tabela filamentos existe
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'filamentos') THEN
        RAISE EXCEPTION 'Tabela filamentos não existe. Execute primeiro o script supabase-schema.sql';
    END IF;
    
    -- Verificar se a tabela marcas existe
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'marcas') THEN
        RAISE EXCEPTION 'Tabela marcas não existe. Execute primeiro o script supabase-schema.sql';
    END IF;
    
    -- Verificar se a tabela tipos_filamentos existe
    IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'tipos_filamentos') THEN
        RAISE EXCEPTION 'Tabela tipos_filamentos não existe. Execute primeiro o script supabase-schema.sql';
    END IF;
END $$;

-- 2. Garantir que RLS está habilitado nas tabelas principais
ALTER TABLE filamentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE marcas ENABLE ROW LEVEL SECURITY;
ALTER TABLE tipos_filamentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE impressoras ENABLE ROW LEVEL SECURITY;
ALTER TABLE produtos ENABLE ROW LEVEL SECURITY;
ALTER TABLE orcamentos ENABLE ROW LEVEL SECURITY;
ALTER TABLE orcamento_itens ENABLE ROW LEVEL SECURITY;

-- 3. Remover políticas existentes que possam estar causando conflitos
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON filamentos;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON marcas;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON tipos_filamentos;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON impressoras;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON produtos;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON orcamentos;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON orcamento_itens;

-- 4. Criar novas políticas mais permissivas
CREATE POLICY "filamentos_policy" ON filamentos
    FOR ALL TO authenticated USING (true);

CREATE POLICY "marcas_policy" ON marcas
    FOR ALL TO authenticated USING (true);

CREATE POLICY "tipos_filamentos_policy" ON tipos_filamentos
    FOR ALL TO authenticated USING (true);

CREATE POLICY "impressoras_policy" ON impressoras
    FOR ALL TO authenticated USING (true);

CREATE POLICY "produtos_policy" ON produtos
    FOR ALL TO authenticated USING (true);

CREATE POLICY "orcamentos_policy" ON orcamentos
    FOR ALL TO authenticated USING (true);

CREATE POLICY "orcamento_itens_policy" ON orcamento_itens
    FOR ALL TO authenticated USING (true);

-- 5. Garantir que a tabela estoque_filamentos existe e tem as políticas corretas
CREATE TABLE IF NOT EXISTS estoque_filamentos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    filamento_id UUID NOT NULL REFERENCES filamentos(id) ON DELETE CASCADE,
    quantidade_g INTEGER NOT NULL CHECK (quantidade_g != 0),
    novo_valor_kg NUMERIC(10, 2) NOT NULL CHECK (novo_valor_kg >= 0),
    observacao TEXT
);

ALTER TABLE estoque_filamentos ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Permitir acesso total para usuários autenticados" ON estoque_filamentos;
CREATE POLICY "estoque_filamentos_policy" ON estoque_filamentos
    FOR ALL TO authenticated USING (true);

-- 6. Verificar e corrigir a função handle_filament_stock_entry
CREATE OR REPLACE FUNCTION handle_filament_stock_entry(
    p_filament_id UUID,
    p_quantity_grams INTEGER,
    p_new_price_kg NUMERIC,
    p_observation TEXT DEFAULT NULL
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Insere o registro na tabela de histórico de movimentações
    INSERT INTO public.estoque_filamentos(filamento_id, quantidade_g, novo_valor_kg, observacao)
    VALUES (p_filament_id, p_quantity_grams, p_new_price_kg, p_observation);

    -- Atualiza o registro principal do filamento
    UPDATE public.filamentos
    SET 
        quantidade_estoque_gramas = COALESCE(quantidade_estoque_gramas, 0) + p_quantity_grams,
        preco_por_kg = p_new_price_kg
    WHERE id = p_filament_id;
END;
$$;

-- 7. Verificar se há dados de exemplo nas tabelas
DO $$
BEGIN
    -- Inserir marcas se não existirem
    INSERT INTO marcas (nome) VALUES 
        ('Creality'),
        ('Prusa Research'),
        ('Voolt')
    ON CONFLICT (nome) DO NOTHING;

    -- Inserir tipos de filamento se não existirem
    INSERT INTO tipos_filamentos (nome) VALUES 
        ('PLA'),
        ('ABS'),
        ('PETG'),
        ('TPU')
    ON CONFLICT (nome) DO NOTHING;
END $$;

-- 8. Mostrar status das tabelas
SELECT 
    table_name,
    CASE WHEN row_security = 'YES' THEN 'RLS Habilitado' ELSE 'RLS Desabilitado' END as rls_status,
    (SELECT COUNT(*) FROM information_schema.policies WHERE table_name = t.table_name) as policies_count
FROM information_schema.tables t
WHERE table_name IN ('filamentos', 'marcas', 'tipos_filamentos', 'impressoras', 'produtos', 'orcamentos', 'orcamento_itens', 'estoque_filamentos')
AND table_schema = 'public'
ORDER BY table_name; 